name: dogs
role: system
description: >
  Greyhound Prediction Agent V4 ‚Äî end-to-end workflow orchestrator for the greyhound
  prediction system using MLSystemV4 and PredictionPipelineV4 within venv311 on port 5002.
  Responsible for monitoring logic integrity, data health, UI/backend consistency,
  asset performance, and post-deployment stability. Applies advanced validation rules,
  logs every file/endpoint interaction, and enforces real-world prediction constraints.
  Ensures end-to-end traceability, rigorous error handling, and consistency across the stack.

entry_point: app.py

memory:
  context_files:
    - app.py
    - run.py
    - ml_system_v4.py
    - prediction_pipeline_v4.py
    - advisory.py
    - endpoint_cache.py
    - database_manager.py
    - schema.sql
    - static/
    - templates/
    - /features/
    - /tests/
    - /predictions/
    - /upcoming_races/
    - /archive/
    - README.md
    - docs/FORM_GUIDE_SPEC.md
    - form_guide_checklist.yaml
    - form_guide_audit_report.yaml

run_commands:
  - python run.py
  - python -m unittest discover -s tests
  - python scripts/calibrate_model.py

pre_run_hooks:
  - echo "üîé Running schema drift check..."
  - python scripts/schema_diff.py
  - echo "üì¶ Validating static asset manifest..."
  - python scripts/check_assets.py

logging_policy:
  format: jsonl
  path: logs/system_log.jsonl
  include:
    - timestamp
    - module
    - severity
    - message

watch:
  paths:
    - /features/
    - /templates/
    - /static/
    - /ml_system_v4.py
    - /prediction_pipeline_v4.py
    - /advisory.py
    - schema.sql
  on_change:
    - run: python -m unittest discover -s tests
    - run: python scripts/update_docs.py

# Goals capture high-level intentions that must always be satisfied
# and are used to drive validations and checks.
goals:
  - ‚úÖ Use PredictionPipelineV4 as the primary inference engine
  - ‚úÖ Detect and prevent post-race data leakage:
      ‚Ä¢ Exclude finish_position, margin, actual_time, and sectional_time from prediction inputs
      ‚Ä¢ Training must only include data from historical races
  - ‚úÖ CSV Format Enforcement (historical data = form guide CSVs):
      ‚Ä¢ Use pipe-delimited "|" parsing
      ‚Ä¢ Recognize dog name as a header; following empty rows belong to that dog's history
      ‚Ä¢ Form guide contains only 10 unique dogs; blank rows map to preceding dog (rows 1,4,7,... for dog 1,2,...)
      ‚Ä¢ Validate presence of headers, line counts, and malformed structures
  - ‚úÖ Maintain frontend/backend alignment:
      ‚Ä¢ Ensure prediction, advisory, and stats endpoints exist in app.py and README
      ‚Ä¢ Automatically document all active endpoints and files accessed
  - ‚úÖ Asset optimization and delivery:
      ‚Ä¢ Integrate Flask-Compress middleware
      ‚Ä¢ Enable SEND_FILE_MAX_AGE_DEFAULT for caching
      ‚Ä¢ Apply cache-busting to static files
      ‚Ä¢ Deduplicate Bootstrap/FontAwesome classes
      ‚Ä¢ Warn if >50% of FontAwesome glyphs are unused
  - ‚úÖ Enforce API/HTML integration of advisory system:
      ‚Ä¢ /predict and /ml_dashboard must call /api/generate_advisory
      ‚Ä¢ Advisory messages should display with correct colors/icons for INFO, WARNING, CRITICAL
      ‚Ä¢ Cache advisory results to reduce compute
  - ‚úÖ Ensure accurate probability outputs:
      ‚Ä¢ Calibrate win_prob, place_prob using isotonic regression or Platt scaling
      ‚Ä¢ Normalize win_prob within each race and check for rank/order violations
      ‚Ä¢ Add fallback_reason and advisory_log to every prediction JSON output
  - ‚úÖ Full traceability:
      ‚Ä¢ Log every file read, model used, or module triggered with timestamps
      ‚Ä¢ Log malformed races or skipped rows to /logs/data_discard_log.jsonl
      ‚Ä¢ Warn when features are missing, null, or low completeness (<95%)
  - ‚úÖ Reject invalid probabilities:
      ‚Ä¢ win_prob < 0.0 or > 1.0 = fatal error
      ‚Ä¢ win_prob + place_prob > 1.0 = soft warning
  - ‚úÖ Versioned training:
      ‚Ä¢ Record and hash every training run and save model version
      ‚Ä¢ Warn if deployed model is older than X days
  - ‚úÖ Add expected value (EV) scoring:
      ‚Ä¢ Calculate: EV = win_prob √ó odds
      ‚Ä¢ Warn if EV > 1.05 but not surfaced in top bets
  - ‚úÖ Track distribution drift:
      ‚Ä¢ Compare predicted vs. actual outcome distributions
      ‚Ä¢ Alert on calibration drift
  - ‚úÖ Compute cohort variance:
      ‚Ä¢ Log prediction performance by track, distance, box number, dog weight
      ‚Ä¢ Identify patterns or feature-specific underperformance
  - ‚úÖ Terminology enforcement and winner source:
      ‚Ä¢ Use ‚Äúhistorical data‚Äù to refer to form guide CSVs and derived features
      ‚Ä¢ Use ‚Äúrace data‚Äù to refer to scraped race page fields (conditions, winners, etc.)
      ‚Ä¢ Winners must be scraped from the race webpage (never inferred from historical data)
  - ‚úÖ Repository hygiene and reuse:
      ‚Ä¢ Always check archive folders for missing files before creating new ones
      ‚Ä¢ Prefer improving existing scripts over creating new ones; propose quality/prediction improvements
      ‚Ä¢ Move outdated/redundant files to archive folders; keep test scripts under tests/ or tests/scripts/
      ‚Ä¢ Request HTML screenshots or copy-paste when scraping navigation requires guidance

# Preconditions and checks are actionable guards before running or writing outputs
preconditions_and_checks:
  - name: venv_active
    ensure: Project venv (venv311) is active before execution
  - name: inputs_terminology_consistency
    ensure: References to data sources follow historical vs race data terminology
  - name: winner_source_integrity
    ensure: Winner fields are only populated from race webpage scrape; block if unavailable
  - name: form_guide_structure
    ensure: Exactly 10 unique dogs; blank rows are attached to preceding dog; pipe-delimited
  - name: archive_first_policy
    ensure: When a file appears missing (CSV, logs, predictions), search archive/ before creating anew
  - name: reuse_over_create
    ensure: Prefer updating existing scripts; if proposing a new script, include rationale and deprecation plan
  - name: repo_hygiene
    ensure: Plan moves of outdated scripts to archive/ and test scripts to tests/ or tests/scripts/ (no execution)
  - name: navigation_support
    ensure: If scraping needs manual navigation insights, request HTML screenshots or pasted markup

# Validation steps are executed right after data ingestion, scraping, or prediction
validation_steps:
  - stage: ingest_form_guide
    checks:
      - Validate pipe-delimited structure and headers
      - Enforce 10-unique-dogs rule and row-to-dog mapping (1,4,7,...)
      - Attach blank rows to preceding dog and verify continuity
      - Log malformed rows to logs/data_discard_log.jsonl
  - stage: scrape_race_page
    checks:
      - Extract race data (track, weather, distances) distinctly from historical data
      - Verify winner is present on the race page; do not fallback to form guide
      - Record raw HTML snapshot reference for traceability (path-only, no PII)
  - stage: build_features
    checks:
      - Use only historical data from prior races; prohibit current race outcomes
      - Detect and strip post-race features (finish_position, margin, actual_time, sectional_time)
  - stage: predict
    checks:
      - Normalize probabilities per race and validate bounds
      - Calibrate (isotonic/Platt) and persist calibration version
      - Add fallback_reason and advisory_log
  - stage: output_persistence
    checks:
      - Archive-first check before writing predictions or new CSVs
      - Document file writes and moves for repo hygiene

# Hook guidance offers actionable notes on what to do after success or failure
hooks:
  on_error:
    - If winner not found on race page, pause; request HTML screenshot or paste of the race page section and retry.
    - If form guide parsing fails mapping, log to data_discard_log and open a task to review FORM_GUIDE_SPEC and parser.
    - If a required file is missing, search archive/ and related archive subfolders before suggesting creation.
    - If a new script seems necessary, propose an improvement plan first, including deprecations and tests.
  on_success:
    - Record provenance: list every file read/written, modules triggered, and endpoints called.
    - Summarize calibration status and drift metrics; note any cohort underperformance.
    - Highlight repo hygiene actions to schedule (move outdated files to archive/, group tests under tests/).

# System Rules:
# -------------------------------
# - ‚ùå Do not use any post-race features from the same race being predicted
# - ‚úÖ Use only historical data from previous races for input features
# - ‚úÖ Always validate structure, freshness, and completeness of input data
# - ‚úÖ Log all actions with rich metadata: files, endpoints, models, inputs
# - ‚úÖ Halt predictions if critical errors or missing data detected
# - ‚úÖ Winners must come from race webpage (never infer from form guide)
# - ‚úÖ Archive-first policy before creating any new file
# - ALWAYS USE THE PROJECT VENV

