# GitHub Actions Workflow for CI/CD
name: CI Pipeline - Greyhound Racing Predictor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DATABASE_URL: postgresql://test_user:test_password@localhost:5433/greyhound_test
  REDIS_URL: redis://localhost:6380/0
  TESTING: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: greyhound_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5433:5432
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Set up PostgreSQL test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d greyhound_test -f tests/data/fixtures/001_init_schema.sql
        echo "PostgreSQL test database initialized successfully"

    - name: Install Playwright browsers
      run: |
        npx playwright install --with-deps

    - name: Install and cache ChromeDriver
      run: |
        python -m webdriver_manager.chrome
        echo "ChromeDriver installed and cached successfully"

    - name: Run ChromeDriver smoke test
      run: |
        python tests/test_chromedriver_smoke.py
        echo "ChromeDriver smoke test passed successfully"

    - name: Run database migrations
      run: |
        # Run Alembic migrations on test database if alembic.ini exists
        if [ -f "alembic.ini" ]; then
          alembic upgrade head
        fi

    - name: Database Schema Consistency Tests
      run: |
        echo "Running database schema consistency tests..."
        
        # Test 1: Alembic schema consistency (empty diff check)
        echo "Testing Alembic schema consistency..."
        python -m pytest tests/test_database_schema_consistency.py::test_alembic_schema_consistency -v
        
        # Test 2: Foreign key indexes check
        echo "Testing foreign key indexes..."
        python -m pytest tests/test_database_schema_consistency.py::test_foreign_key_indexes -v
        
        # Test 3: Data integrity checks
        echo "Testing data integrity..."
        python -m pytest tests/test_database_schema_consistency.py::test_data_integrity -v
        
        # Test 4: Schema hash generation
        echo "Testing schema hash generation..."
        python -m pytest tests/test_database_schema_consistency.py::test_schema_hash_generation -v
        
        echo "Schema consistency tests completed successfully!"
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run load tests with Locust
      run: |
        pip install locust
        locust --headless -u 10 -r 1 -f load_tests/locustfile.py --run-time 2m --csv=locust-result
        cat locust-result_stats.csv

    - name: Run unit tests
      run: |
        make test
    
    - name: Run key consistency regression tests
      run: |
        echo "Running key consistency tests to prevent KeyError regressions..."
        python -m pytest tests/test_key_consistency.py \
          -m "key_consistency and not slow" \
          --tb=short \
          -v \
          --maxfail=3 \
          --timeout=300
        echo "Key consistency tests completed successfully!"
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Run security tests
      run: |
        make security

    - name: Run integration tests
      run: |
        # Run specific integration tests if they exist
        if [ -d "tests/integration" ]; then
          pytest tests/integration/ -v --cov-append
        fi

    - name: Run end-to-end tests
      if: matrix.python-version == '3.11'
      run: |
        make e2e

    - name: Run performance tests
      if: matrix.python-version == '3.11'
      run: |
        make perf

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        python run.py --help || echo "CLI help command tested"

    - name: Train lightweight model for testing
      if: matrix.python-version == '3.11'
      run: |
        export TESTING=1
        export DATABASE_URL=sqlite:///test_greyhound_racing_data.db
        python scripts/train_test_model.py

    - name: Performance guardrails check
      if: matrix.python-version == '3.11'
      run: |
        python scripts/check_performance_guardrails.py

    - name: Upload model artifacts
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: |
          test_model.pkl
          model_metrics.json

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
