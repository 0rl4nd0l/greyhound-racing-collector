name: Backend Unit Tests

on:
  push:
    branches: [ main, develop, requirements-update ]
  pull_request:
    branches: [ main, develop, requirements-update ]

env:
  DATABASE_URL: postgresql://test_user:test_password@localhost:5433/greyhound_test
  REDIS_URL: redis://localhost:6380/0
  TESTING: true
  UPCOMING_RACES_DIR: ./upcoming_races_temp
  OPENAI_USE_LIVE: 0

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: greyhound_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5433:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 3s --health-retries 3
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Validate upcoming_races CSVs
      run: |
        echo "🔎 Validating upcoming_races CSVs..."
        python scripts/validate_upcoming_races.py --strict-future || (echo "❌ Upcoming races validation failed" && exit 1)
    
    - name: Set up PostgreSQL test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d greyhound_test -f tests/data/fixtures/001_init_schema.sql || echo "Schema setup completed"
        echo "PostgreSQL test database initialized successfully"
    
    - name: Create test directories
      run: |
        mkdir -p /tmp/tests_uploads
        mkdir -p logs
        mkdir -p unprocessed
        mkdir -p processed
        mkdir -p historical_races
        mkdir -p ${UPCOMING_RACES_DIR}
    
    - name: Run comprehensive backend unit tests with coverage
      run: |
        echo "Running comprehensive backend unit test suite..."
        python -m pytest tests/test_backend_suite.py tests/test_flask_api.py tests/test_backend.py \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=13 \
          --tb=short \
          -v \
          --maxfail=10 \
          --timeout=300
        echo "Backend unit tests completed successfully!"
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        REDIS_URL: ${{ env.REDIS_URL }}
        TESTING: true
    
    - name: Run API endpoint tests
      run: |
        echo "Running API endpoint tests..."
        python -m pytest tests/test_flask_api.py \
          --tb=short \
          -v \
          --maxfail=5 \
          --timeout=180
        echo "API endpoint tests completed successfully!"
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        REDIS_URL: ${{ env.REDIS_URL }}
        TESTING: true
    
    - name: Run database operation tests
      run: |
        echo "Running database operation tests..."
        python -m pytest tests/test_database_integrity.py \
          --tb=short \
          -v \
          --maxfail=3 \
          --timeout=120
        echo "Database operation tests completed successfully!"
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        TESTING: true
    
    - name: Run key consistency regression tests
      run: |
        echo "Running key consistency tests to prevent KeyError regressions..."
        python -m pytest tests/test_key_consistency.py \
          -m "key_consistency and not slow" \
          --tb=short \
          -v \
          --maxfail=3 \
          --timeout=300
        echo "Key consistency tests completed successfully!"
      continue-on-error: false  # This will block merges on failure
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  comprehensive-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask
    
    - name: Create test directories
      run: |
        mkdir -p /tmp/tests_uploads
        mkdir -p logs
        mkdir -p unprocessed
        mkdir -p processed
        mkdir -p historical
        mkdir -p upcoming
    
    - name: Run comprehensive backend tests (non-prediction)
      run: |
        python -m pytest tests/test_comprehensive_backend.py \
          -k "not predict and not malformed" \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml:comprehensive-coverage.xml \
          --timeout=300 \
          -v
      continue-on-error: true  # Don't fail CI if comprehensive tests timeout
    
    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./comprehensive-coverage.xml
        flags: comprehensive
        name: comprehensive-coverage
      if: success()

  ui-e2e:
    if: ${{ false }}
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 20
    env:
      PORT: 5002
      ENABLE_ENDPOINT_DROPDOWNS: 1
      FLASK_ENV: testing
      MODULE_GUARD_STRICT: 0
      PREDICTION_IMPORT_MODE: relaxed
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test directories
        run: |
          mkdir -p logs
          mkdir -p upcoming_races
          mkdir -p /tmp/tests_uploads

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node dependencies
        run: |
          npm install

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Install Cypress binary
        run: |
          npx cypress install

      - name: Start Flask server (background)
        run: |
          nohup bash -c "ENABLE_ENDPOINT_DROPDOWNS=1 FLASK_ENV=testing PORT=5002 python app.py --host 127.0.0.1 --port 5002 > server.log 2>&1 &" 
          echo $! > server.pid
          sleep 2

      - name: Wait for server to be ready
        run: |
          for i in {1..60}; do
            if curl -sSf http://127.0.0.1:5002/api/endpoints > /dev/null; then
              echo "Server is ready"; break; fi; sleep 1; done

      - name: Run Playwright endpoints menu tests (desktop)
        run: |
          npx playwright test --config=playwright.local-no-server.config.js tests/playwright/e2e/endpoints-menu.spec.ts --project=chromium-desktop

      - name: Run Cypress endpoints menu test (electron headless)
        run: |
          npx cypress run --spec cypress/e2e/endpoints-menu.cy.js --browser electron --headless

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos/

      - name: Show server logs on failure
        if: failure()
        run: |
          echo "==== Server Log ===="
          tail -n +1 server.log || true

      - name: Stop Flask server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi
          sleep 1
          pkill -f "python app.py" || true
